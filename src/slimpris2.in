#!/usr/bin/env python
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: terual (https://github.com/terual)
# 
# Heavily based on mpDris2 by Erik Karlsson <pilo@ayeon.org> and
#  Jean-Philippe Braun <eon@patapon.info>
# Some bits taken from quodlibet mpris plugin by <christoph.reiter@gmx.at>

import os
import sys
import re
import signal
import socket
import getopt
import gobject
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import ConfigParser
import logging

import urllib #for quote and unquote
import simplejson
import urllib2
import telnetlib

import gettext
gettext.bindtextdomain('slimpris2', '@datadir@/locale')
gettext.textdomain('slimpris2')
_ = gettext.gettext

identity = "Squeezebox"
params = {
    'host': 'localhost',
    'port': 9000,
    'mac': '00:00:00:00:00:01',
    'password': None,
    'progname': sys.argv[0],
    'music_dir': '',
    'mmkeys': True,
    'notify': True,
}

try:
    import pynotify
except:
    params['notify'] = False


notification = None

# MPRIS allowed metadata tags
allowed_tags = {
    'mpris:trackid': dbus.ObjectPath,
    'mpris:length': long,
    'mpris:artUrl': str,
    'xesam:album': str,
    'xesam:albumArtist': list,
    'xesam:artist': list,
    'xesam:asText': str,
    'xesam:audioBPM': int,
    'xesam:comment': list,
    'xesam:composer': list,
    'xesam:contentCreated': str,
    'xesam:discNumber': int,
    'xesam:firstUsed': str,
    'xesam:genre': list,
    'xesam:lastUsed': str,
    'xesam:lyricist': str,
    'xesam:title': str,
    'xesam:trackNumber': int,
    'xesam:url': str,
    'xesam:useCount': int,
    'xesam:userRating': float,
}

# python dbus bindings don't include annotations and properties
MPRIS2_INTROSPECTION = \
"""<node name="/org/mpris/MediaPlayer2">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg direction="out" name="xml_data" type="s"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg direction="in" name="interface_name" type="s"/>
      <arg direction="in" name="property_name" type="s"/>
      <arg direction="out" name="value" type="v"/>
    </method>
    <method name="GetAll">
      <arg direction="in" name="interface_name" type="s"/>
      <arg direction="out" name="properties" type="a{sv}"/>
    </method>
    <method name="Set">
      <arg direction="in" name="interface_name" type="s"/>
      <arg direction="in" name="property_name" type="s"/>
      <arg direction="in" name="value" type="v"/>
    </method>
    <signal name="PropertiesChanged">
      <arg name="interface_name" type="s"/>
      <arg name="changed_properties" type="a{sv}"/>
      <arg name="invalidated_properties" type="as"/>
    </signal>
  </interface>
  <interface name="org.mpris.MediaPlayer2">
    <method name="Raise"/>
    <method name="Quit"/>
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    <property name="CanQuit" type="b" access="read"/>
    <property name="CanRaise" type="b" access="read"/>
    <property name="HasTrackList" type="b" access="read"/>
    <property name="Identity" type="s" access="read"/>
    <property name="DesktopEntry" type="s" access="read"/>
    <property name="SupportedUriSchemes" type="as" access="read"/>
    <property name="SupportedMimeTypes" type="as" access="read"/>
  </interface>
  <interface name="org.mpris.MediaPlayer2.Player">
    <method name="Next"/>
    <method name="Previous"/>
    <method name="Pause"/>
    <method name="PlayPause"/>
    <method name="Stop"/>
    <method name="Play"/>
    <method name="Seek">
      <arg direction="in" name="Offset" type="x"/>
    </method>
    <method name="SetPosition">
      <arg direction="in" name="TrackId" type="o"/>
      <arg direction="in" name="Position" type="x"/>
    </method>
    <method name="OpenUri">
      <arg direction="in" name="Uri" type="s"/>
    </method>
    <signal name="Seeked">
      <arg name="Position" type="x"/>
    </signal>
    <property name="PlaybackStatus" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="LoopStatus" type="s" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="Rate" type="d" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="Shuffle" type="b" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="Metadata" type="a{sv}" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="Volume" type="d" access="readwrite">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>
    <property name="Position" type="x" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>
    <property name="MinimumRate" type="d" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="MaximumRate" type="d" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanGoNext" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanGoPrevious" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanPlay" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanPause" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanSeek" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanControl" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
    </property>
  </interface>
  <interface name="org.mpris.MediaPlayer2.TrackList">
    <property name="Tracks" type="ao" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
    <property name="CanEditTracks" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
    </property>
  </interface>
</node>"""


# Default url handlers if MPD doesn't support 'urlhandlers' command
urlhandlers = [ 'http://' ]
downloaded_covers = [ '.covers/%s-%s.jpg' ]
local_covers = [ 'cover.jpg', 'cover.png', 'album.jpg', 'front.jpg',
    'folder.jpg', '.folder.jpg', '.folder.png', 'AlbumArt.jpg',
    'AlbumArtSmall.jpg' ]


# Wrapper to handle socket errors and similar
class SBWrapper():

    def __init__(self, params):
        self.sc = None
        self._dbus = dbus
        self._params = params
        self._monitor = False
        self._status = False
        self._position = 0
        self._dbus_service = False
        self._errors = 0
        # init mmkeys, if configured
        if self._params['mmkeys']:
            try:
                gsd_object = dbus.SessionBus().get_object('org.gnome.SettingsDaemon',
                    '/org/gnome/SettingsDaemon/MediaKeys')
                # this is what gives us the multi media keys.
                gsd_object.GrabMediaPlayerKeys('Squeezebox', 0,
                    dbus_interface='org.gnome.SettingsDaemon.MediaKeys')
                # connect_to_signal registers our callback function.
                gsd_object.connect_to_signal('MediaPlayerKeyPressed', self.on_mediakey)
            except:
                logger.error('Failed to connect to GNOME Settings Daemon.' \
                    ' Disabling multimedia key support')
                params['mmkeys'] = False

    def run(self):
        """ Try to connect to MPD """
        if self.my_connect():
            # If connection fail retry in 5 seconds
            gobject.timeout_add(1000, self.my_connect)

    def my_connect(self):
        """ Init MPD connection """
        try:
            # Connect to host
            #self.sc = Server(hostname=HOSTNAME, port=CLIPORT)
            #self.sc.connect()
            
            # Make the socket non blocking to detect deconnections
            #self.sc.telnet.get_socket().settimeout(5.0)
            
            # Export our DBUS service
            if not self._dbus_service:
                self._dbus_service = MPRISInterface()
            else:
                # Add our service to the session bus
                self._dbus_service.add_to_connection(dbus.SessionBus(),
                    '/org/mpris/MediaPlayer2')
                self._dbus_service.aquire_name()
            
            # Init internal state to throw events at start
            self.init_state()
            # Add periodic status check for sending MPRIS events
            self._monitor = gobject.timeout_add(5000, self.monitor)
            # Reset error counter
            self._errors = 0
            # Return False to stop trying to connect
            return False
        except socket.error as e:
            self._errors += 1
            if self._errors < 6:
                logger.error('Could not connect to MPD: %s' % e)
            if self._errors == 6:
                logger.info('Continue to connect but going silent')
            return True

    def reconnect(self):
        logger.warning("Disconnected")
        notification.rnotify(identity, _('Disconnected'), 'error')
        # Release the Dbus name
        self._dbus_service.release_name();
        # Disconnect service from the session bus
        self._dbus_service.remove_from_connection();
        # Stop monitoring
        gobject.source_remove(self._monitor)
        # Clean mpd client state
        #self.disconnect()
        # Try to reconnect
        self.run()

    def init_state(self):
        # Get current state
        self._status = lms.get_playing_info()
        # Invalid some fields to throw events at start
        self._status['mode'] = 'invalid'
        if self._status.has_key('playlist_loop'):
            self._status['playlist_loop'][int(self._status['playlist_cur_index'])]['title'] = 'invalid'
        self._status['playlist_cur_index'] = '-1'
        self._position = 0

    def monitor(self):
        old_status = self._status
        old_position = self._position

        self._status = lms.get_playing_info()

        if type(self._status) == type(dict()):

            if 'time' in self._status:
                self._position = int(self._status['time'])
            else:
                self._position = 0

            if self._status['mode'] == 'play' and self._status.has_key('playlist_cur_index') and self._status.has_key('playlist_loop'):
                if (old_status['playlist_cur_index'] != self._status['playlist_cur_index']) or \
                   (old_status['playlist_loop'][int(old_status['playlist_cur_index'])]['id'] != self._status['playlist_loop'][int(self._status['playlist_cur_index'])]['id']):
                    metadata = self._dbus_service.update_property('org.mpris.MediaPlayer2.Player', 'Metadata')
                    if self._params['notify']:
                        uri = 'sound'
                        if 'mpris:artUrl' in metadata:
                            uri = metadata['mpris:artUrl']
                        title = 'Unknown Title'
                        if 'xesam:title' in metadata:
                            title = metadata['xesam:title']
                        artist = 'Unknown Artist'
                        if 'xesam:artist' in metadata:
                            artist = metadata['xesam:artist'][0]
                        notification.notify(title, _('by %s') % artist, uri)

            if self._status['mode'] != 'stop' and old_status['mode'] != 'stop':
                if (abs(self._position - old_position) > 2 and \
                   old_status['playlist_cur_index'] == self._status['playlist_cur_index']) or \
                   old_status['playlist_cur_index'] == '-1':
                    self._dbus_service.Seeked(self._position * 1000000)


            if old_status['mixer volume'] != self._status['mixer volume']:
                self._dbus_service.update_property('org.mpris.MediaPlayer2.Player', 'Volume')

            if old_status['mode'] != self._status['mode']:
                self._dbus_service.update_property('org.mpris.MediaPlayer2.Player', 'PlaybackStatus')

            if old_status['playlist shuffle'] != self._status['playlist shuffle']:
                self._dbus_service.update_property('org.mpris.MediaPlayer2.Player', 'Shuffle')

            if old_status['playlist repeat'] != self._status['playlist repeat']:
                self._dbus_service.update_property('org.mpris.MediaPlayer2.Player', 'LoopStatus')
                
            if old_status.has_key('playlist_loop') and self._status.has_key('playlist_loop'):
                if len(old_status['playlist_loop'])+1 == len(self._status['playlist_loop']):
                    # Track added
                    pass
                elif len(old_status['playlist_loop']) == len(self._status['playlist_loop'])+1:
                    # Track removed
                    pass
                elif old_status['playlist_loop'] != self._status['playlist_loop']:
                    # New TrackList
                    self._dbus_service.update_property('org.mpris.MediaPlayer2.TrackList', 'Tracks')

        # Return True to continue polling
        return True

    def on_mediakey(self, appname, key):
        """ GNOME media key handler """
        logger.debug('Got GNOME mmkey "%s" for "%s"' % (key, appname))
        if key == 'Play':
            if self._status['mode'] == 'play':
                notification.rnotify(identity, _('Paused'))
                lms.pause()
            else:
                notification.rnotify(identity, _('Playing'))
                lms.play()
        elif key == 'Next':
            lms.next()
        elif key == 'Previous':
            lms.prev()
        elif key == 'Stop':
            notification.rnotify(identity, _('Stopped'))
            lms.stop()


class Notify:
    def __init__(self, params):
        """ Init the notification system """
        if params['notify']:
            if pynotify.init(identity):
                self._notification = pynotify.Notification("", "", "")
            else:
                logger.error('Failed to init libnotify; disabling' \
                    'notifications')
                self._notification = False
        else:
            self._notification = False

    def notify(self, title, body, uri = ''):
        """ Issue a new notification """
        if self._notification:
            self._notification = pynotify.Notification(title, body, uri)
            self._notification.show()

    def rnotify(self, title, body, uri = ''):
        """ Replace current notification """
        if self._notification:
            self._notification.update(title, body, uri)
            self._notification.show()



class MPRISInterface(dbus.service.Object):
    ''' The base object of an MPRIS player '''

    __name = "org.mpris.MediaPlayer2.squeezebox"
    __path = "/org/mpris/MediaPlayer2"
    __introspect_interface = "org.freedesktop.DBus.Introspectable"
    __prop_interface = dbus.PROPERTIES_IFACE

    def __init__(self):
        dbus.service.Object.__init__(self, dbus.SessionBus(),
            MPRISInterface.__path)
        self.aquire_name()

    def aquire_name(self):
        self._bus_name = dbus.service.BusName(MPRISInterface.__name,
            bus=dbus.SessionBus())

    def release_name(self):
        del self._bus_name

    __root_interface = "org.mpris.MediaPlayer2"
    __root_props = {
        "CanQuit": (False, None),
        "CanRaise": (False, None),
        "Fullscreen": (False, None),
        "CanSetFullscreen": (False, None),
        "DesktopEntry": ("Squeezebox", None),
        "HasTrackList": (True, None),
        "Identity": (identity, None),
        "SupportedUriSchemes": (dbus.Array(signature="s"), None),
        "SupportedMimeTypes": (dbus.Array(signature="s"), None)
    }

    def __get_playback_status():
        status = sb_wrapper._status
        return {'play': 'Playing', 'pause': 'Paused', 'stop': 'Stopped'}[status['mode']]

    def __set_loop_status(value):
        if str(value) == "Playlist":
            lms.set_repeat(2)
        elif str(value) == "Track":
            lms.set_repeat(1)
        elif str(value) == "None":
            lms.set_repeat(0)
        else:
            raise dbus.exceptions.DBusException("Loop mode not supported")
        return

    def __get_loop_status():
        #if lms.get_repeat() == '0':
        if sb_wrapper._status['playlist repeat'] == '2':
            return "Playlist"
        elif sb_wrapper._status['playlist repeat'] == '1':
            return "Track"
        else:
            return "None"
            
    def __set_shuffle(value):
        # TODO
        return

    def __get_shuffle():
        #if lms.get_shuffle() == '0':
        if sb_wrapper._status['playlist shuffle'] == '0':
            return False
        else:
            return True

    def __get_metadata():
        try:
            index = int(sb_wrapper._status['playlist_cur_index'])
        except:
            return
        if index >= 0:
            track_id = sb_wrapper._status['playlist_loop'][index]['id']
            return format_metadata(lms.metadata(track_id), "Track")
        return

    def __get_volume():
        #vol = float(lms.get_volume())
        vol = float(sb_wrapper._status['mixer volume'])
        if vol > 0:
            return vol / 100
        else:
            return 0

    def __set_volume(value):
        if value >= 0 and value <= 1:
            lms.set_volume(int(value * 100))
        return

    def __get_position():
        #position = lms.get_position()
        position = sb_wrapper._status['time']
        return dbus.Int64(int(position * 1000000))

    def __can_next():
        status = sb_wrapper._status #lms.get_playing_info()
        if 'playlist_cur_index' in status and 'playlist_tracks' in status:
            if int(status['playlist_cur_index']) < int(status['playlist_tracks']):
                return True
        return False

    def __can_seek():
        status = sb_wrapper._status #lms.get_playing_info()
        if 'can_seek' in status:
            if status['can_seek'] == 1:
                return True
        return False
        
    __player_interface = "org.mpris.MediaPlayer2.Player"
    __player_props = {
        "PlaybackStatus": (__get_playback_status, None),
        "LoopStatus": (__get_loop_status, __set_loop_status),
        "Rate": (1.0, None),
        "Shuffle": (__get_shuffle, __set_shuffle),
        "Metadata": (__get_metadata, None),
        "Volume": (__get_volume, __set_volume),
        "Position": (__get_position, None),
        "MinimumRate": (1.0, None),
        "MaximumRate": (1.0, None),
        "CanGoNext": (__can_next, None),
        "CanGoPrevious": (True, None),
        "CanPlay": (True, None),
        "CanPause": (True, None),
        "CanSeek": (__can_seek, None),
        "CanControl": (True, None),
    }

    def __get_tracklist():
        status = sb_wrapper._status
        tracklist = []
        if status.has_key('playlist_loop'):
            for track in status['playlist_loop']:
                tracklist.append(dbus.ObjectPath("/org/mpris/MediaPlayer2/TrackList/%s" % track['id']))
        return dbus.Array(tracklist, signature="o")

    __tracklist_interface = "org.mpris.MediaPlayer2.TrackList"
    __tracklist_props = {
        "Tracks": (__get_tracklist, None),
        "CanEditTracks": (False, None),
    }

    __prop_mapping = {
        __tracklist_interface: __tracklist_props,
        __player_interface: __player_props,
        __root_interface: __root_props}

    @dbus.service.method(__introspect_interface)
    def Introspect(self):
        return MPRIS2_INTROSPECTION

    @dbus.service.signal(__prop_interface, signature="sa{sv}as")
    def PropertiesChanged(self, interface, changed_properties,
        invalidated_properties):
        pass

    @dbus.service.method(__prop_interface,
                         in_signature="ss", out_signature="v")
    def Get(self, interface, prop):
        getter, setter = self.__prop_mapping[interface][prop]
        if callable(getter):
            return getter()
        return getter

    @dbus.service.method(__prop_interface,
                         in_signature="ssv", out_signature="")
    def Set(self, interface, prop, value):
        getter, setter = self.__prop_mapping[interface][prop]
        if setter is not None:
            setter(value)

    @dbus.service.method(__prop_interface,
                         in_signature="s", out_signature="a{sv}")
    def GetAll(self, interface):
        read_props = {}
        props = self.__prop_mapping[interface]
        for key, (getter, setter) in props.iteritems():
            if callable(getter): getter = getter()
            read_props[key] = getter
        return read_props

    def update_property(self, interface, prop):
        getter, setter = self.__prop_mapping[interface][prop]
        if callable(getter):
            value = getter()
        else:
            value = getter
        logger.debug('Updated property: %s = %s' % (prop, value))
        self.PropertiesChanged(interface, {prop: value}, [])
        return value

    # Root methods
    @dbus.service.method(__root_interface, in_signature='', out_signature='')
    def Raise(self):
        return

    @dbus.service.method(__root_interface, in_signature='', out_signature='')
    def Quit(self):
        return

    # Player methods
    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def Next(self):
        lms.next()
        return

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def Previous(self):
        lms.prev()
        return

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def Pause(self):
        status = lms.get_mode()
        if status == 'play':
            lms.pause()
            notification.rnotify(identity, _('Paused'))
        return

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def PlayPause(self):
        status = lms.get_mode()
        if status == 'play':
            lms.pause()
            notification.rnotify(identity, _('Paused'))
        else:
            lms.play()
            notification.rnotify(identity, _('Playing'))
        return

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def Stop(self):
        lms.stop()
        notification.rnotify(identity, _('Stopped'))
        return

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def Play(self):
        lms.play()
        notification.notify(identity, _('Playing'))
        return

    @dbus.service.method(__player_interface, in_signature='x', out_signature='')
    def Seek(self, offset):
        status = sb_wrapper._status #lms.get_playing_info()
        current = float(status['time'])
        end = float(status['duration'])
        offset = float(offset) / 1000000
        if current + offset <= end:
            position = current + offset
            if position < 0: position = 0
            lms.set_position(position)
            self.Seeked(position * 1000000)
        return

    @dbus.service.method(__player_interface, in_signature='ox', out_signature='')
    def SetPosition(self, trackid, position):
        song = sb_wrapper._status #lms.get_playing_info()
        if trackid != dbus.ObjectPath('/org/mpris/MediaPlayer2/Track/%s' % song['id']): return
        # Convert position to seconds
        position = float(position) / 1000000
        logger.debug("SetPosition: %i, %i" % (position, int(song['time'])))
        if position <= int(song['time']):
            lms.set_position(position)
            self.Seeked(int(position * 1000000))
        return

    @dbus.service.signal(__player_interface, signature='x')
    def Seeked(self, position):
        logger.debug("Seeked to %i" % position)
        return float(position)

    @dbus.service.method(__player_interface, in_signature='', out_signature='')
    def OpenUri(self):
        # TODO
        return

    # Tracklist methods
    @dbus.service.method(__tracklist_interface, in_signature='ao', out_signature='aa{sv}')
    def GetTracksMetadata(self, track_ids):
        metadata = []
        for track_id in track_ids:
            track_id = int(str(track_id).replace('/org/mpris/MediaPlayer2/TrackList/', ''))
            metadata.append(format_metadata(lms.metadata(track_id), "TrackList"))
        return dbus.Array(metadata, signature="a{sv}")

    @dbus.service.method(__tracklist_interface, in_signature='sob', out_signature='')
    def AddTrack(self, uri, after_track, set_as_current):
        return

    @dbus.service.method(__tracklist_interface, in_signature='o', out_signature='')
    def RemoveTrack(self, track_id):
        track_id = int(str(track_id).replace('/org/mpris/MediaPlayer2/TrackList/', ''))
        for track in sb_wrapper._status['playlist_loop']:
            if int(track['id']) == track_id:
                lms.playlist_remove(int(track['playlist index']))
        return

    @dbus.service.method(__tracklist_interface, in_signature='o', out_signature='')
    def GoTo(self, track_id):
        track_id = int(str(track_id).replace('/org/mpris/MediaPlayer2/TrackList/', ''))
        for track in sb_wrapper._status['playlist_loop']:
            if int(track['id']) == track_id:
                lms.playlist_goto(int(track['playlist index']))
        return

    @dbus.service.signal(__tracklist_interface, signature='ao')
    def TrackListReplaced(self, tracklist):
        logging.debug("Tracklist replaced: %s", tracklist)
        return tracklist

# Handle signals more gracefully
def handle_sigint(signum, frame):
    logger.debug('Caught SIGINT, exiting.')
    loop.quit()

def format_metadata(data, context):
    """http://xmms2.org/wiki/MPRIS_Metadata"""
    
    metadata = {}
    
    for item in data:
        for key in item:
            metadata[key] = item[key]

    if 'id' in metadata:
        metadata['mpris:trackid'] = dbus.ObjectPath("/org/mpris/MediaPlayer2/%s/%s" % (context, metadata['id']))

    if 'duration' in metadata:
        metadata['mpris:length'] = int(float(metadata['duration']) * 1000000)

    if 'year' in metadata:
        if not int(metadata['year']) == 0:
            metadata['xesam:contentCreated'] = metadata['year']

    if 'tracknum' in metadata:
        metadata['xesam:trackNumber'] = metadata['tracknum']

    if 'genre' in metadata:
        metadata['xesam:genre'] = [metadata['genre'],]

    if 'disc' in metadata:
        metadata['xesam:discNumber'] = int(re.match('^([0-9]+).*',
            metadata['disc']).group(1))

    if 'artist' in metadata:
        metadata['xesam:artist'] = [metadata['artist'],]

    if 'composer' in metadata:
        metadata['xesam:composer'] = [metadata['composer'],]

    mpd_tags = ('album', 'title')
    for tag in mpd_tags:
        if tag in metadata:
            metadata['xesam:%s' % tag] = metadata[tag]

    if 'coverart' in metadata and 'coverid' in metadata:
        if int(metadata['coverart']) == 1:
            metadata['mpris:artUrl'] = lms.get_coverart_url(metadata['coverid'], 80)

    # Stream: populate some missings tags with stream's name
    if 'name' in metadata:
        if 'xesam:title' not in metadata:
            metadata['xesam:title'] = metadata['name']
        elif 'xesam:album' not in metadata:
            metadata['xesam:album'] = metadata['name']

    surplus_tags = set(metadata.keys()).difference(set(allowed_tags.keys()))
    # Remove surplus tags
    for tag in surplus_tags:
        del metadata[tag]

    # Cast metadata to the correct type, or discard it
    for key, value in metadata.items():
        try:
            metadata[key] = allowed_tags[key](value)
        except ValueError:
            del metadata[key]
            logger.error("Can't cast value %s to %s" % \
                (value, allowed_tags[key]))

    return dbus.Dictionary(metadata, signature='sv')


class LMSConnection:
    def get_coverart_url(self, track_id, size=None):
        if size:
            return "http://%s:%s/music/%s/cover_%sx%s_o" % (self.host, self.port, track_id, size, size)
        else:
            return "http://%s:%s/music/%s/cover.jpg" % (self.host, self.port, track_id)

    def get_playing_info(self):
        #{'signalstrength': 0, 'mixer volume': 100, 'player_name': 'Studeerkamer', 'playlist mode': 'off', 'power': 1, 'playlist repeat': 0, 'player_ip': '192.168.1.58:49078', 'playlist_timestamp': 1338368677.0128, 'playlist_cur_index': '0', 'playlist shuffle': 0, 'rate': 1, 'seq_no': 0, 'mode': 'play', 'time': 161.490672870636, 'duration': 314.232, 'can_seek': 1, 'playlist_tracks': 12, 'player_connected': 1}
        info = self.query(self.player_id, "status", "0", None, "tags:")
        return info
    
    def metadata(self, track_id):
        #path = self.get_track_path()
        songinfo = self.query(self.player_id, "songinfo", "0", None, "track_id:%s" % track_id )
        return songinfo['songinfo_loop']

    def get_track_path(self):
        return self.query(self.player_id, "path", "?")['_path']

    def get_track_id(self, path):
        return self.query(self.player_id, "songinfo", "0", "1", "url:%s" % path)['songinfo_loop'][0]['id']

    def get_track_title(self):
        return self.query(self.player_id, "title", "?")['_title']
    
    def get_track_artist(self):
        return self.query(self.player_id, "artist", "?")['_artist']

    def get_track_album(self):
        return self.query(self.player_id, "album", "?")['_album']

    def get_track_duration(self):
        return self.query(self.player_id, "duration", "?")['_duration']
        
    def get_mode(self):
        return self.query(self.player_id, "mode", "?")['_mode']
        
    def play(self):
        return self.query(self.player_id, "play")

    def pause(self):
        return self.query(self.player_id, "pause")
        
    def stop(self):
        return self.query(self.player_id, "stop")

    def next(self):
        return self.query(self.player_id, "playlist", "jump", "+1")

    def prev(self):
        return self.query(self.player_id, "playlist", "jump", "-1")

    def get_volume(self):
        # Get volume (0-100)
        return float(self.query(self.player_id, "mixer", "volume", "?")['_volume'])

    def set_volume(self, volume):
        # Set volume (0-100)
        return self.query(self.player_id, "mixer", "volume", volume) 

    def get_position(self):
        return float(self.query(self.player_id, "time", "?")['_time'])
    
    def set_position(self, pos):
        # set in seconds
        return self.query(self.player_id, "time", pos)
        
    def seek(self, pos):
        if pos>=0:
            return self.query(self.player_id, "time", "+%d" % pos)
        else:
            return self.query(self.player_id, "time", "-%d" % pos)
               
    def set_repeat(self, num):
        # 0 no repeat, 1 repeat song, 2 repeat playlist. 
        return self.query(self.player_id, "playlist", "repeat", num)

    def get_repeat(self):
        # 0 no repeat, 1 repeat song, 2 repeat playlist. 
        return self.query(self.player_id, "playlist", "repeat", "?")['_repeat']
        
    def get_shuffle(self):
        # 0 no shuffle, 1 shuffle songs, 2 shuffle albums. 
        return self.query(self.player_id, "playlist", "shuffle", "?")['_shuffle']

    def set_shuffle(self, num):
        # 0 no shuffle, 1 shuffle songs, 2 shuffle albums. 
        return self.query(self.player_id, "playlist", "shuffle", num)
        
    def playlist_goto(self, playlist_index):
        return self.query(self.player_id, "playlist", "index", playlist_index)

    def playlist_remove(self, playlist_index):
        return self.query(self.player_id, "playlist", "delete", playlist_index) 


class JSONConnection(LMSConnection):

    def __init__(self, params):
        
        self.host = params['host']
        self.port = params['port']
        self.username = None
        self.password = None
        if 'username' in params:
            self.username = params['username']
        if 'password' in params:
            self.password = params['password']
        self.server_url = "http://%s:%s/jsonrpc.js" % (self.host, self.port)
        self.player_id = params['mac']

    def get_coverart_url(self, track_id, size=None):
    
        login = ""
        if self.username and self.password:
            login = "%s:%s@"%(self.username, self.password)
    
        if size:
            return "http://%s%s:%s/music/%s/cover_%sx%s_o" % (login, self.host, self.port, track_id, size, size)
        else:
            return "http://%s%s:%s/music/%s/cover.jpg" % (login, self.host, self.port, track_id)

    def query(self, player_id, *args):
        params = simplejson.dumps({'id':1, 'method':'slim.request', 'params':[player_id, list(args)]})
        req = urllib2.Request(self.server_url, params)
        
        if self.username and self.password:
            import base64
            req.add_header('Authorization', b'Basic ' + base64.b64encode(self.username + b':' + self.password))
        try:
            response = urllib2.urlopen(req)
        except urllib2.HTTPError, error:
            contents = error.read()
            logging.error("Error, query: %s. %s", list(args), contents)
            return
        response_txt = response.read()
        result = simplejson.loads(response_txt)['result']
        logging.debug("query: %s, result: %s", list(args), result)
        return result

class CLIConnection(LMSConnection):
    
    def __init__(self, params):
        
        self.host = params['host']
        self.port = 9090
        self.player_id = params['mac']
        self._telnet = telnetlib.Telnet(self.host, self.port)

    def login(self):
        result = self.query("login", self.username, self.password)
        self.logged_in = (result == "******")

    def query(self, player_id, *args):
        
        req = player_id.encode('utf8') + ' '
        for arg in args:
            if arg:
                req += arg.encode('utf8') + ' '
        self._telnet.write(req + "\n")
        response = self._telnet.read_until("\n")[:-1].decode('utf8')
        
        #logging.info("req: %s, response: %s", req, response)
        print "REQ:", req
        print "RES:", response
        
        split = response.split(' ')
        result = {}
        for n, item in enumerate(split):
            item = urllib.unquote(item)
            
            if re.match("[0-9a-f]{2}([-:][0-9a-f]{2}){5}$", item.lower()):
                result['player_id'] = item
                
            elif len(args) > n:
                if args[n] == "?":
                    print args[n], item

            elif ":" in item:
                key, value = item.split(":", 1)
                try:
                    if float(value)-int(value) == 0:
                        result[key] = int(value)
                    else:
                        result[key] = float(value)
                except:
                    result[key] = value
        print result
        return result


def usage(params):
    print """\
Usage: %(progname)s [OPTION]... [LMS_HOST] [LMS_PORT] [PLAYER_MAC]

     -p, --path=PATH        Sets the library path of LMS to PATH
     -d, --debug            Run in debug mode

Default: LMS_HOST: %(host)s
         LMS_PORT: %(port)s
         PLAYER_MAC: %(mac)s

Report bugs to https://github.com/terual/slimpris2/issues""" % params

if __name__ == '__main__':
    DBusGMainLoop(set_as_default=True)
    
    path = ""
    
    config = ConfigParser.SafeConfigParser()
    config.read(['/etc/slimpris2.conf', os.path.expanduser('~/.config/slimpris2/slimpris2.conf')])

    if config.has_option('Connection', 'host'):
        params['host'] = config.get('Connection', 'host')
    if config.has_option('Connection', 'port'):
        params['port'] = config.get('Connection', 'port')
    if config.has_option('Connection', 'mac'):
        params['mac'] = config.get('Connection', 'mac')
    if config.has_option('Connection', 'username'):
        params['username'] = config.get('Connection', 'username')
    if config.has_option('Connection', 'password'):
        params['password'] = config.get('Connection', 'password')
    if config.has_option('Connection', 'music_dir'):
        path = config.get('Connection', 'music_dir')

    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'hdp:', ['help', 'debug', 'path='])
    except getopt.GetoptError, (msg, opt):
        print sys.argv[0] + ': ' + msg
        print
        usage(params)
        sys.exit(2)

    log_format = '%(asctime)s %(module)s %(levelname)s: %(message)s'
    log_level = logging.INFO

    for (opt, arg) in opts:
        if opt in ['-h', '--help']:
            usage(params)
            sys.exit()
        elif opt in ['-p', '--path']:
            path = arg
        elif opt in ['-d', '--debug']:
            log_level = logging.DEBUG

    logging.basicConfig(format=log_format, level=log_level)
    logger = logging.getLogger('slimpris2')

    if len(args) == 3 and args[1].isdigit():
        params['host'] = args[0]
        params['port'] = int(args[1])
        params['mac'] = args[2]
    elif len(args) == 0:
        pass
    else:
        usage(params)
        sys.exit()

    if path and os.path.exists(path):
        logger.info('Using %s as music library path' % path)
        if not path.startswith('file://'):
            params['music_dir'] = 'file://' + path
    else:
        logger.warning('By not supplying a path for the music library ' \
            'this program will break the MPRIS specification!')

    for bling in ['mmkeys','notify']:
        if config.has_option('Bling', bling):
            params[bling] = config.getboolean('Bling', bling)
    
    loop = gobject.MainLoop()
    signal.signal(signal.SIGINT, handle_sigint)

    # Used to communicate with LMS
    lms = JSONConnection(params)

    # Wrapper to send notifications
    notification = Notify(params)

    # Create wrapper to handle connection failures with MPD more gracefully
    sb_wrapper = SBWrapper(params)
    sb_wrapper.run()

    # Run idle loop
    loop.run()

